#!/usr/bin/env bash

set -e

export DK_VERSION="1.2.4"

error() {
    echo -e "\e[1m\e[31m$1\e[0m" >&2
}

bold() {
    echo -e "\e[36m$1\e[0m"
}

verbose() {
    echo -e "\e[1m\e[30m$1\e[0m"
}

devkit-install-git-clone-internal() {
    local repo="$1"
    local temp_dir="$2"

    local git_options="-c http.sslVerify=false -c http.lowSpeedLimit=1000 -c http.lowSpeedTime=5000"

    git $git_options clone "$repo" "$temp_dir"
    if [ "$?" = "0" ]; then
        return 0
    else
        return 1
    fi
}

devkit-install-git-clone() {
    local host_name="$1"
    local repo_name="$2"
    local temp_dir="$3"

    echo " - Trying SSH connection to $host_name..."
    echo

    if devkit-install-git-clone-internal "git@${host_name}:${repo_name}.git" "$temp_dir"; then
        return 0
    fi

    echo
    echo " - SSH connection to $host_name failed, trying HTTPS"
    echo

    if devkit-install-git-clone-internal "https://${host_name}/${repo_name}.git" "$temp_dir"; then
        return 0
    fi
}

_devkit-validate-source-dir() {
    if [ "$DEVKIT_SRC_DIR" = "" ]; then
        echo "ERROR: You must export a variable 'DEVKIT_SRC_DIR' with the path of your devkit local repo."
        exit 1
    fi
}

devkit-install() {
    local temp_dir="./tmp/devkit-packages"
    rm -rf "$temp_dir"

    if [ "$1" = "dev" ]; then
        _devkit-validate-source-dir
        mkdir -p "./tmp"
        cp -r "$DEVKIT_SRC_DIR" "$temp_dir"
    else
        echo "----------------------------------------"
        echo "Pulling latest devkit from a git repo..."
        echo "----------------------------------------"
        echo
        local is_frb_network=false
        if nslookup github.firstrepublic.com > /dev/null; then
            is_frb_network=true
            echo " - Detected that you are on the FRB network, using github.firstrepublic.com..."
        else
            echo " - Detected that you are NOT on the FRB network, using bitbucket.org/frb-special-projects..."
        fi

        set +e
        if $is_frb_network; then
            devkit-install-git-clone "github.firstrepublic.com" "DEVX/devkit" "$temp_dir"
        else
            devkit-install-git-clone "bitbucket.org" "frb-special-projects/devkit-python-poc" "$temp_dir"
        fi
        set -e

        if [ ! -d "$temp_dir" ]; then
            echo
            echo "ERROR: Devkit install failed!!!"
            echo "Couldn't pull the latest devkit from a git repo"
            exit 1
        else
            echo
            echo " - Devkit cloned successfully. Running installer..."
            echo
        fi
    fi

    #echo "running $temp_dir/update_devkit_internal.py"
    python3 "$temp_dir/update_devkit_internal.py" "$@"
}


main() {
    local command="$1"

    local error_banner="dk ERROR:"

    # Ensure python3+ is available

    export PYTHON_BIN="python3"
    if ! which python3 > /dev/null; then
        if ! which python > /dev/null; then
            PYTHON_BIN="python"
            if ! which py > /dev/null; then
                PYTHON_BIN="py"
            fi
        fi
    fi

    local python_version=$("$PYTHON_BIN" --version 2>&1)
    if [[ ! $python_version =~ Python\ 3. ]]; then
        error "Python version not supported: $python_version"
    fi

    if [ "$command" = "--version" ] || [ "$command" = "-v" ]; then
        echo "dk: version $DK_VERSION, $python_version"
        exit 0
    fi

    if [ "$command" = "update-devkit" ]; then
        devkit-install "${@:2}"
        exit 0
    fi

    # Setup PYTHONPATH to read from devkit directories
    local current_dir="$(pwd)"

    # If DEVKIT_SRC_DIR is specified, ignore the local directory and use the development version
    local dev_dir="${current_dir}/devkit-packages"
    if [ ! "$DEVKIT_SRC_DIR" = "" ]; then
        dev_dir="$DEVKIT_SRC_DIR"
    fi

    if [ ! -d "$dev_dir" ]; then
        error "$error_banner Expected to find devkit installed at ./devkit-packages, but it was missing. Did you install devkit?"
        exit 1
    fi

    export PYTHONPATH="${current_dir}/devkit:${dev_dir}:${PYTHONPATH}"

    #echo "PYTHONPATH: $PYTHONPATH"

    # Slice out first two arguments (bash, script path), and pass to the command script
    "$PYTHON_BIN" "${dev_dir}/run_command.py" "$command" "${@:2}"
}

main "$@"


